// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// getUpAndInCallPrice
double getUpAndInCallPrice(double InitialPriceOfAsset, double StrikePrice, double Volatility, double InterestRate, double TimeToMaturity, double BarrierLevel, int numSimulations, int numTimeSteps);
RcppExport SEXP _OptionMonteCarlo_getUpAndInCallPrice(SEXP InitialPriceOfAssetSEXP, SEXP StrikePriceSEXP, SEXP VolatilitySEXP, SEXP InterestRateSEXP, SEXP TimeToMaturitySEXP, SEXP BarrierLevelSEXP, SEXP numSimulationsSEXP, SEXP numTimeStepsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type InitialPriceOfAsset(InitialPriceOfAssetSEXP);
    Rcpp::traits::input_parameter< double >::type StrikePrice(StrikePriceSEXP);
    Rcpp::traits::input_parameter< double >::type Volatility(VolatilitySEXP);
    Rcpp::traits::input_parameter< double >::type InterestRate(InterestRateSEXP);
    Rcpp::traits::input_parameter< double >::type TimeToMaturity(TimeToMaturitySEXP);
    Rcpp::traits::input_parameter< double >::type BarrierLevel(BarrierLevelSEXP);
    Rcpp::traits::input_parameter< int >::type numSimulations(numSimulationsSEXP);
    Rcpp::traits::input_parameter< int >::type numTimeSteps(numTimeStepsSEXP);
    rcpp_result_gen = Rcpp::wrap(getUpAndInCallPrice(InitialPriceOfAsset, StrikePrice, Volatility, InterestRate, TimeToMaturity, BarrierLevel, numSimulations, numTimeSteps));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_OptionMonteCarlo_getUpAndInCallPrice", (DL_FUNC) &_OptionMonteCarlo_getUpAndInCallPrice, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_OptionMonteCarlo(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
